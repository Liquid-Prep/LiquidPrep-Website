{"ast":null,"code":"import _toConsumableArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/index.ts\nimport { trackElementSize } from \"@zag-js/element-size\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nvar useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? useLayoutEffect : useEffect;\nfunction trackMutation(el, cb) {\n  var _a, _b;\n  if (!el || !el.parentElement) return;\n  var win = (_b = (_a = el.ownerDocument) == null ? void 0 : _a.defaultView) != null ? _b : window;\n  var observer = new win.MutationObserver(function () {\n    cb();\n  });\n  observer.observe(el.parentElement, {\n    childList: true\n  });\n  return function () {\n    observer.disconnect();\n  };\n}\nfunction useSizes(_ref) {\n  var getNodes = _ref.getNodes,\n    _ref$observeMutation = _ref.observeMutation,\n    observeMutation = _ref$observeMutation === void 0 ? true : _ref$observeMutation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    sizes = _useState2[0],\n    setSizes = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    count = _useState4[0],\n    setCount = _useState4[1];\n  useSafeLayoutEffect(function () {\n    var elements = getNodes();\n    var cleanups = elements.map(function (element, index) {\n      return trackElementSize(element, function (size) {\n        setSizes(function (sizes2) {\n          return [].concat(_toConsumableArray(sizes2.slice(0, index)), [size], _toConsumableArray(sizes2.slice(index + 1)));\n        });\n      });\n    });\n    if (observeMutation) {\n      var firstNode = elements[0];\n      cleanups.push(trackMutation(firstNode, function () {\n        setCount(function (count2) {\n          return count2 + 1;\n        });\n      }));\n    }\n    return function () {\n      cleanups.forEach(function (cleanup) {\n        cleanup == null ? void 0 : cleanup();\n      });\n    };\n  }, [count]);\n  return sizes;\n}\nfunction isRef(ref) {\n  return typeof ref === \"object\" && ref !== null && \"current\" in ref;\n}\nfunction useSize(subject) {\n  var _useSizes = useSizes({\n      observeMutation: false,\n      getNodes: function getNodes() {\n        var node = isRef(subject) ? subject.current : subject;\n        return [node];\n      }\n    }),\n    _useSizes2 = _slicedToArray(_useSizes, 1),\n    size = _useSizes2[0];\n  return size;\n}\nexport { useSize, useSizes };","map":null,"metadata":{},"sourceType":"module"}