{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Hide: function Hide() {\n    return _Hide;\n  },\n  Show: function Show() {\n    return _Show;\n  },\n  useBreakpoint: function useBreakpoint() {\n    return _useBreakpoint;\n  },\n  useBreakpointValue: function useBreakpointValue() {\n    return _useBreakpointValue;\n  },\n  useColorModePreference: function useColorModePreference() {\n    return _useColorModePreference;\n  },\n  useMediaQuery: function useMediaQuery() {\n    return _useMediaQuery;\n  },\n  usePrefersReducedMotion: function usePrefersReducedMotion() {\n    return _usePrefersReducedMotion;\n  },\n  useQuery: function useQuery() {\n    return _useQuery;\n  }\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/media-query.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  var _a, _b;\n  return (_b = (_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) != null ? _b : value;\n};\nfunction _useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n    breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n    below = props.below,\n    above = props.above;\n  var theme = (0, import_system.useTheme)();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n  if (bpBelow) {\n    query = \"(max-width: \".concat(bpBelow, \")\");\n  } else if (bpAbove) {\n    query = \"(min-width: \".concat(bpAbove, \")\");\n  }\n  return query;\n}\n\n// src/use-media-query.ts\nvar import_react_env = require(\"@chakra-ui/react-env\");\nvar import_react = require(\"react\");\nfunction _useMediaQuery(query) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$ssr = options.ssr,\n    ssr = _options$ssr === void 0 ? true : _options$ssr,\n    fallback = options.fallback;\n  var _ref = (0, import_react_env.useEnvironment)(),\n    getWindow = _ref.getWindow;\n  var queries = Array.isArray(query) ? query : [query];\n  var fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(function (v) {\n    return v != null;\n  });\n  var _ref2 = (0, import_react.useState)(function () {\n      return queries.map(function (query2, index) {\n        return {\n          media: query2,\n          matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n        };\n      });\n    }),\n    _ref3 = _slicedToArray(_ref2, 2),\n    value = _ref3[0],\n    setValue = _ref3[1];\n  (0, import_react.useEffect)(function () {\n    var win = getWindow();\n    setValue(queries.map(function (query2) {\n      return {\n        media: query2,\n        matches: win.matchMedia(query2).matches\n      };\n    }));\n    var mql = queries.map(function (query2) {\n      return win.matchMedia(query2);\n    });\n    var handler = function handler(evt) {\n      setValue(function (prev) {\n        return prev.slice().map(function (item) {\n          if (item.media === evt.media) return _objectSpread({}, item, {\n            matches: evt.matches\n          });\n          return item;\n        });\n      });\n    };\n    mql.forEach(function (mql2) {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return function () {\n      mql.forEach(function (mql2) {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(function (item) {\n    return item.matches;\n  });\n}\n\n// src/visibility.tsx\nfunction Visibility(props) {\n  var breakpoint = props.breakpoint,\n    hide = props.hide,\n    children = props.children,\n    ssr = props.ssr;\n  var _useMediaQuery2 = _useMediaQuery(breakpoint, {\n      ssr: ssr\n    }),\n    _useMediaQuery3 = _slicedToArray(_useMediaQuery2, 1),\n    show = _useMediaQuery3[0];\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n}\n\n// src/hide.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction _Hide(props) {\n  var children = props.children,\n    ssr = props.ssr;\n  var query = _useQuery(props);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(Visibility, {\n    breakpoint: query,\n    hide: true,\n    ssr: ssr,\n    children: children\n  });\n}\n_Hide.displayName = \"Hide\";\n\n// src/media-query.hook.ts\nfunction _usePrefersReducedMotion(options) {\n  var _useMediaQuery4 = _useMediaQuery(\"(prefers-reduced-motion: reduce)\", options),\n    _useMediaQuery5 = _slicedToArray(_useMediaQuery4, 1),\n    prefersReducedMotion = _useMediaQuery5[0];\n  return prefersReducedMotion;\n}\nfunction _useColorModePreference(options) {\n  var _useMediaQuery6 = _useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"], options),\n    _useMediaQuery7 = _slicedToArray(_useMediaQuery6, 2),\n    isLight = _useMediaQuery7[0],\n    isDark = _useMediaQuery7[1];\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return void 0;\n}\n\n// src/show.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nfunction _Show(props) {\n  var children = props.children,\n    ssr = props.ssr;\n  var query = _useQuery(props);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(Visibility, {\n    breakpoint: query,\n    ssr: ssr,\n    children: children\n  });\n}\n_Show.displayName = \"Show\";\n\n// src/use-breakpoint.ts\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nfunction _useBreakpoint(arg) {\n  var _a, _b;\n  var opts = (0, import_shared_utils.isObject)(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  var theme = (0, import_system2.useTheme)();\n  var breakpoints = theme.__breakpoints.details.map(function (_ref4) {\n    var minMaxQuery = _ref4.minMaxQuery,\n      breakpoint = _ref4.breakpoint;\n    return {\n      breakpoint: breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    };\n  });\n  var fallback = breakpoints.map(function (bp) {\n    return bp.breakpoint === opts.fallback;\n  });\n  var values = _useMediaQuery(breakpoints.map(function (bp) {\n    return bp.query;\n  }), {\n    fallback: fallback,\n    ssr: opts.ssr\n  });\n  var index = values.findIndex(function (value) {\n    return value == true;\n  });\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\n\n// src/use-breakpoint-value.ts\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_breakpoint_utils2 = require(\"@chakra-ui/breakpoint-utils\");\n\n// src/media-query.utils.ts\nvar import_breakpoint_utils = require(\"@chakra-ui/breakpoint-utils\");\nfunction getClosestValue(values, breakpoint) {\n  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : import_breakpoint_utils.breakpoints;\n  var index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  var stopIndex = breakpoints.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    var key = breakpoints[stopIndex];\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    var _key = breakpoints[index];\n    return values[_key];\n  }\n  return void 0;\n}\n\n// src/use-breakpoint-value.ts\nfunction _useBreakpointValue(values, arg) {\n  var _a;\n  var opts = (0, import_shared_utils2.isObject)(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  var breakpoint = _useBreakpoint(opts);\n  var theme = (0, import_system3.useTheme)();\n  if (!breakpoint) return;\n  var breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  var obj = Array.isArray(values) ? Object.fromEntries(Object.entries((0, import_breakpoint_utils2.arrayToObjectNotation)(values, breakpoints)).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      value = _ref6[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Hide: _Hide,\n  Show: _Show,\n  useBreakpoint: _useBreakpoint,\n  useBreakpointValue: _useBreakpointValue,\n  useColorModePreference: _useColorModePreference,\n  useMediaQuery: _useMediaQuery,\n  usePrefersReducedMotion: _usePrefersReducedMotion,\n  useQuery: _useQuery\n});","map":null,"metadata":{},"sourceType":"script"}