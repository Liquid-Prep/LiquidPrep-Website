{"ast":null,"code":"import { FOCUS_DISABLED, FOCUS_GROUP } from '../constants';\nimport { asArray, toArray } from './array';\n/**\n * in case of multiple nodes nested inside each other\n * keeps only top ones\n * this is O(nlogn)\n * @param nodes\n * @returns {*}\n */\nvar filterNested = function filterNested(nodes) {\n  var contained = new Set();\n  var l = nodes.length;\n  for (var i = 0; i < l; i += 1) {\n    for (var j = i + 1; j < l; j += 1) {\n      var position = nodes[i].compareDocumentPosition(nodes[j]);\n      /* eslint-disable no-bitwise */\n      if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {\n        contained.add(j);\n      }\n      if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {\n        contained.add(i);\n      }\n      /* eslint-enable */\n    }\n  }\n\n  return nodes.filter(function (_, index) {\n    return !contained.has(index);\n  });\n};\n/**\n * finds top most parent for a node\n * @param node\n * @returns {*}\n */\nvar getTopParent = function getTopParent(node) {\n  return node.parentNode ? getTopParent(node.parentNode) : node;\n};\n/**\n * returns all \"focus containers\" inside a given node\n * @param node\n * @returns {T}\n */\nexport var getAllAffectedNodes = function getAllAffectedNodes(node) {\n  var nodes = asArray(node);\n  return nodes.filter(Boolean).reduce(function (acc, currentNode) {\n    var group = currentNode.getAttribute(FOCUS_GROUP);\n    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll(\"[\".concat(FOCUS_GROUP, \"=\\\"\").concat(group, \"\\\"]:not([\").concat(FOCUS_DISABLED, \"=\\\"disabled\\\"])\")))) : [currentNode]);\n    return acc;\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}