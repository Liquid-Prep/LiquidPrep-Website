{"ast":null,"code":"import _toConsumableArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/breakpoint.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nfunction getLastItem(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue(value) {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit: unit\n  };\n}\nfunction px(value) {\n  if (value == null) return value;\n  var _analyzeCSSValue = analyzeCSSValue(value),\n    unitless = _analyzeCSSValue.unitless;\n  return unitless || typeof value === \"number\" ? \"\".concat(value, \"px\") : value;\n}\nvar sortByBreakpointValue = function sortByBreakpointValue(a, b) {\n  return parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\n};\nvar sortBps = function sortBps(breakpoints) {\n  return Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\n};\nfunction normalize(breakpoints) {\n  var sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n  var value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\nfunction subtract(value) {\n  var _a;\n  if (!value) return value;\n  value = (_a = px(value)) != null ? _a : value;\n  var OFFSET = -0.02;\n  return typeof value === \"number\" ? \"\".concat(value + OFFSET) : value.replace(/([0-9]+\\.?[0-9]*)/, function (m) {\n    return \"\".concat(parseFloat(m) + OFFSET);\n  });\n}\nfunction toMediaQueryString(min, max) {\n  var query = [\"@media screen\"];\n  if (min) query.push(\"and\", \"(min-width: \".concat(px(min), \")\"));\n  if (max) query.push(\"and\", \"(max-width: \".concat(px(max), \")\"));\n  return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints) {\n  var _a;\n  if (!breakpoints) return null;\n  breakpoints.base = (_a = breakpoints.base) != null ? _a : \"0px\";\n  var normalized = normalize(breakpoints);\n  var queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(function (_ref, index, entry) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      breakpoint = _ref2[0],\n      minW = _ref2[1];\n    var _a2;\n    var _ref3 = (_a2 = entry[index + 1]) != null ? _a2 : [],\n      _ref4 = _slicedToArray(_ref3, 2),\n      maxW = _ref4[1];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : void 0;\n    return {\n      _minW: subtract(minW),\n      breakpoint: breakpoint,\n      minW: minW,\n      maxW: maxW,\n      maxWQuery: toMediaQueryString(null, maxW),\n      minWQuery: toMediaQueryString(minW),\n      minMaxQuery: toMediaQueryString(minW, maxW)\n    };\n  });\n  var _keys = keys(breakpoints);\n  var _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized: normalized,\n    isResponsive: function isResponsive(test) {\n      var keys2 = Object.keys(test);\n      return keys2.length > 0 && keys2.every(function (key) {\n        return _keys.has(key);\n      });\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    get: function get(key) {\n      return queries.find(function (q) {\n        return q.breakpoint === key;\n      });\n    },\n    media: [null].concat(_toConsumableArray(normalized.map(function (minW) {\n      return toMediaQueryString(minW);\n    }).slice(1))),\n    toArrayValue: function toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      var result = _keysArr.map(function (bp) {\n        var _a2;\n        return (_a2 = test[bp]) != null ? _a2 : null;\n      });\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    toObjectValue: function toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce(function (acc, value, index) {\n        var key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n  };\n}\nexport { px, toMediaQueryString, analyzeBreakpoints };","map":null,"metadata":{},"sourceType":"module"}