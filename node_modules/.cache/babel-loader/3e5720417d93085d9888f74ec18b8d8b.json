{"ast":null,"code":"import _toConsumableArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// src/extend-theme.ts\nimport { theme, baseTheme, isChakraTheme } from \"@chakra-ui/theme\";\nimport mergeWith from \"lodash.mergewith\";\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction pipe() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return function (v) {\n    return fns.reduce(function (a, b) {\n      return b(a);\n    }, v);\n  };\n}\nvar createExtendTheme = function createExtendTheme(theme2) {\n  return function extendTheme2() {\n    for (var _len2 = arguments.length, extensions = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      extensions[_key2] = arguments[_key2];\n    }\n    var overrides = [].concat(extensions);\n    var activeTheme = extensions[extensions.length - 1];\n    if (isChakraTheme(activeTheme) && overrides.length > 1) {\n      overrides = overrides.slice(0, overrides.length - 1);\n    } else {\n      activeTheme = theme2;\n    }\n    return pipe.apply(void 0, _toConsumableArray(overrides.map(function (extension) {\n      return function (prevTheme) {\n        return isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);\n      };\n    })))(activeTheme);\n  };\n};\nvar extendTheme = createExtendTheme(theme);\nvar extendBaseTheme = createExtendTheme(baseTheme);\nfunction mergeThemeOverride() {\n  for (var _len3 = arguments.length, overrides = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    overrides[_key3] = arguments[_key3];\n  }\n  return mergeWith.apply(void 0, [{}].concat(overrides, [mergeThemeCustomizer]));\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return function () {\n      var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;\n      var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n  return void 0;\n}\nexport { extendTheme, extendBaseTheme, mergeThemeOverride };","map":null,"metadata":{},"sourceType":"module"}