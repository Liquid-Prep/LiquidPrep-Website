{"ast":null,"code":"import _objectSpread from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { addPointerEvent, extractEventInfo, isMouseEvent, isMultiTouchEvent } from \"./chunk-LCE7F24A.mjs\";\nimport { getEventWindow } from \"./chunk-O3SWHQEE.mjs\";\nimport { distance, noop, pipe } from \"./chunk-M3TFMUOL.mjs\";\nimport { __publicField } from \"./chunk-NHABU752.mjs\";\n\n// src/pan-event.ts\nimport sync, { cancelSync, getFrameData } from \"framesync\";\nvar PanSession = /*#__PURE__*/function () {\n  function PanSession(event, handlers, threshold) {\n    var _this = this;\n    _classCallCheck(this, PanSession);\n    __publicField(this, \"history\", []);\n    __publicField(this, \"startEvent\", null);\n    __publicField(this, \"lastEvent\", null);\n    __publicField(this, \"lastEventInfo\", null);\n    __publicField(this, \"handlers\", {});\n    __publicField(this, \"removeListeners\", noop);\n    __publicField(this, \"threshold\", 3);\n    __publicField(this, \"win\");\n    __publicField(this, \"updatePoint\", function () {\n      if (!(_this.lastEvent && _this.lastEventInfo)) return;\n      var info = getPanInfo(_this.lastEventInfo, _this.history);\n      var isPanStarted = _this.startEvent !== null;\n      var isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= _this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      var _getFrameData = getFrameData(),\n        timestamp = _getFrameData.timestamp;\n      _this.history.push(_objectSpread({}, info.point, {\n        timestamp: timestamp\n      }));\n      var _this$handlers = _this.handlers,\n        onStart = _this$handlers.onStart,\n        onMove = _this$handlers.onMove;\n      if (!isPanStarted) {\n        onStart == null ? void 0 : onStart(_this.lastEvent, info);\n        _this.startEvent = _this.lastEvent;\n      }\n      onMove == null ? void 0 : onMove(_this.lastEvent, info);\n    });\n    __publicField(this, \"onPointerMove\", function (event, info) {\n      _this.lastEvent = event;\n      _this.lastEventInfo = info;\n      if (isMouseEvent(event) && event.buttons === 0) {\n        _this.onPointerUp(event, info);\n        return;\n      }\n      sync.update(_this.updatePoint, true);\n    });\n    __publicField(this, \"onPointerUp\", function (event, info) {\n      var panInfo = getPanInfo(info, _this.history);\n      var _this$handlers2 = _this.handlers,\n        onEnd = _this$handlers2.onEnd,\n        onSessionEnd = _this$handlers2.onSessionEnd;\n      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);\n      _this.end();\n      if (!onEnd || !_this.startEvent) return;\n      onEnd == null ? void 0 : onEnd(event, panInfo);\n    });\n    this.win = getEventWindow(event);\n    if (isMultiTouchEvent(event)) return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    var info = extractEventInfo(event);\n    var _getFrameData2 = getFrameData(),\n      timestamp = _getFrameData2.timestamp;\n    this.history = [_objectSpread({}, info.point, {\n      timestamp: timestamp\n    })];\n    var onSessionStart = handlers.onSessionStart;\n    onSessionStart == null ? void 0 : onSessionStart(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n  _createClass(PanSession, [{\n    key: \"updateHandlers\",\n    value: function updateHandlers(handlers) {\n      this.handlers = handlers;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      var _a;\n      (_a = this.removeListeners) == null ? void 0 : _a.call(this);\n      cancelSync.update(this.updatePoint);\n    }\n  }]);\n  return PanSession;\n}();\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction startPanPoint(history) {\n  return history[0];\n}\nfunction lastPanPoint(history) {\n  return history[history.length - 1];\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\nvar toMilliseconds = function toMilliseconds(seconds) {\n  return seconds * 1e3;\n};\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var i = history.length - 1;\n  var timestampedPoint = null;\n  var lastPoint = lastDevicePoint(history);\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nexport { PanSession };","map":null,"metadata":{},"sourceType":"module"}