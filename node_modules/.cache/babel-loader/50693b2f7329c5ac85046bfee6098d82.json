{"ast":null,"code":"import _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/env.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext, useContext, useMemo, useReducer, useRef } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar EnvironmentContext = createContext({\n  getDocument: function getDocument() {\n    return document;\n  },\n  getWindow: function getWindow() {\n    return window;\n  }\n});\nEnvironmentContext.displayName = \"EnvironmentContext\";\nfunction useEnvironment() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    defer = _ref.defer;\n  var _useReducer = useReducer(function (c) {\n      return c + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    forceUpdate = _useReducer2[1];\n  useSafeLayoutEffect(function () {\n    if (!defer) return;\n    forceUpdate();\n  }, [defer]);\n  return useContext(EnvironmentContext);\n}\nfunction EnvironmentProvider(props) {\n  var children = props.children,\n    environmentProp = props.environment,\n    disabled = props.disabled;\n  var ref = useRef(null);\n  var context = useMemo(function () {\n    if (environmentProp) return environmentProp;\n    return {\n      getDocument: function getDocument() {\n        var _a, _b;\n        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n      },\n      getWindow: function getWindow() {\n        var _a, _b;\n        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument.defaultView) != null ? _b : window;\n      }\n    };\n  }, [environmentProp]);\n  var showSpan = !disabled || !environmentProp;\n  return /* @__PURE__ */jsxs(EnvironmentContext.Provider, {\n    value: context,\n    children: [children, showSpan && /* @__PURE__ */jsx(\"span\", {\n      id: \"__chakra_env\",\n      hidden: true,\n      ref: ref\n    })]\n  });\n}\nEnvironmentProvider.displayName = \"EnvironmentProvider\";\nexport { useEnvironment, EnvironmentProvider };","map":null,"metadata":{},"sourceType":"module"}