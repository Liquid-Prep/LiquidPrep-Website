{"ast":null,"code":"import _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { hasDisplayNone, hasFocusWithin, hasNegativeTabIndex, hasTabIndex, isActiveElement, isContentEditable, isDisabled, isFocusable, isHidden, isInputElement, isTabbable } from \"./chunk-ROURZMX4.mjs\";\nimport { contains, getActiveElement, getEventWindow, getOwnerDocument, getOwnerWindow, isBrowser, isElement, isHTMLElement } from \"./chunk-3XANSPY5.mjs\";\n\n// src/index.ts\nvar focusableElList = [\"input:not(:disabled):not([disabled])\", \"select:not(:disabled):not([disabled])\", \"textarea:not(:disabled):not([disabled])\", \"embed\", \"iframe\", \"object\", \"a[href]\", \"area[href]\", \"button:not(:disabled):not([disabled])\", \"[tabindex]\", \"audio[controls]\", \"video[controls]\", \"*[tabindex]:not([aria-disabled])\", \"*[contenteditable]\"];\nvar focusableElSelector = focusableElList.join();\nvar isVisible = function isVisible(el) {\n  return el.offsetWidth > 0 && el.offsetHeight > 0;\n};\nfunction getAllFocusable(container) {\n  var focusableEls = Array.from(container.querySelectorAll(focusableElSelector));\n  focusableEls.unshift(container);\n  return focusableEls.filter(function (el) {\n    return isFocusable(el) && isVisible(el);\n  });\n}\nfunction getFirstFocusable(container) {\n  var allFocusable = getAllFocusable(container);\n  return allFocusable.length ? allFocusable[0] : null;\n}\nfunction getAllTabbable(container, fallbackToFocusable) {\n  var allFocusable = Array.from(container.querySelectorAll(focusableElSelector));\n  var allTabbable = allFocusable.filter(isTabbable);\n  if (isTabbable(container)) {\n    allTabbable.unshift(container);\n  }\n  if (!allTabbable.length && fallbackToFocusable) {\n    return allFocusable;\n  }\n  return allTabbable;\n}\nfunction getFirstTabbableIn(container, fallbackToFocusable) {\n  var _getAllTabbable = getAllTabbable(container, fallbackToFocusable),\n    _getAllTabbable2 = _slicedToArray(_getAllTabbable, 1),\n    first = _getAllTabbable2[0];\n  return first || null;\n}\nfunction getLastTabbableIn(container, fallbackToFocusable) {\n  var allTabbable = getAllTabbable(container, fallbackToFocusable);\n  return allTabbable[allTabbable.length - 1] || null;\n}\nfunction getNextTabbable(container, fallbackToFocusable) {\n  var allFocusable = getAllFocusable(container);\n  var index = allFocusable.indexOf(document.activeElement);\n  var slice = allFocusable.slice(index + 1);\n  return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);\n}\nfunction getPreviousTabbable(container, fallbackToFocusable) {\n  var allFocusable = getAllFocusable(container).reverse();\n  var index = allFocusable.indexOf(document.activeElement);\n  var slice = allFocusable.slice(index + 1);\n  return slice.find(isTabbable) || allFocusable.find(isTabbable) || (fallbackToFocusable ? slice[0] : null);\n}\nexport { contains, getActiveElement, getAllFocusable, getAllTabbable, getEventWindow, getFirstFocusable, getFirstTabbableIn, getLastTabbableIn, getNextTabbable, getOwnerDocument, getOwnerWindow, getPreviousTabbable, hasDisplayNone, hasFocusWithin, hasNegativeTabIndex, hasTabIndex, isActiveElement, isBrowser, isContentEditable, isDisabled, isElement, isFocusable, isHTMLElement, isHidden, isInputElement, isTabbable };","map":null,"metadata":{},"sourceType":"module"}