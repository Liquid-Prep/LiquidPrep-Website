{"ast":null,"code":"import _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\nimport { supports } from './feature-detection.es.js';\n\n// Create a linear easing point for every x second\nvar resolution = 0.015;\nvar generateLinearEasingPoints = function generateLinearEasingPoints(easing, duration) {\n  var points = \"\";\n  var numPoints = Math.round(duration / resolution);\n  for (var i = 0; i < numPoints; i++) {\n    points += easing(progress(0, numPoints - 1, i)) + \", \";\n  }\n  return points.substring(0, points.length - 2);\n};\nvar convertEasing = function convertEasing(easing, duration) {\n  if (isFunction(easing)) {\n    return supports.linearEasing() ? \"linear(\".concat(generateLinearEasingPoints(easing, duration), \")\") : defaults.easing;\n  } else {\n    return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n  }\n};\nvar cubicBezierAsString = function cubicBezierAsString(_ref) {\n  var _ref2 = _slicedToArray(_ref, 4),\n    a = _ref2[0],\n    b = _ref2[1],\n    c = _ref2[2],\n    d = _ref2[3];\n  return \"cubic-bezier(\".concat(a, \", \").concat(b, \", \").concat(c, \", \").concat(d, \")\");\n};\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };","map":null,"metadata":{},"sourceType":"module"}