{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _objectWithoutProperties = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _objectSpread = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Skeleton: function Skeleton() {\n    return _Skeleton;\n  },\n  SkeletonCircle: function SkeletonCircle() {\n    return _SkeletonCircle;\n  },\n  SkeletonText: function SkeletonText() {\n    return _SkeletonText;\n  }\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/skeleton.tsx\nvar import_react_use_previous = require(\"@chakra-ui/react-use-previous\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_system = require(\"@chakra-ui/system\");\n\n// src/use-is-first-render.ts\nvar import_react = require(\"react\");\nfunction useIsFirstRender() {\n  var isFirstRender = (0, import_react.useRef)(true);\n  (0, import_react.useEffect)(function () {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n}\n\n// src/skeleton.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar StyledSkeleton = (0, import_system.chakra)(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = (0, import_system.cssVar)(\"skeleton-start-color\");\nvar $endColor = (0, import_system.cssVar)(\"skeleton-end-color\");\nvar fade = (0, import_system.keyframes)({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = (0, import_system.keyframes)({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar _Skeleton = (0, import_system.forwardRef)(function (props, ref) {\n  var skeletonProps = _objectSpread({\n    fadeDuration: 0.4,\n    speed: 0.8\n  }, props);\n  var styles = (0, import_system.useStyleConfig)(\"Skeleton\", skeletonProps);\n  var isFirstRender = useIsFirstRender();\n  var _ref = (0, import_system.omitThemingProps)(skeletonProps),\n    _ref$startColor = _ref.startColor,\n    startColor = _ref$startColor === void 0 ? \"\" : _ref$startColor,\n    _ref$endColor = _ref.endColor,\n    endColor = _ref$endColor === void 0 ? \"\" : _ref$endColor,\n    isLoaded = _ref.isLoaded,\n    fadeDuration = _ref.fadeDuration,\n    speed = _ref.speed,\n    className = _ref.className,\n    fitContent = _ref.fitContent,\n    rest = _objectWithoutProperties(_ref, [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\", \"fitContent\"]);\n  var _ref2 = (0, import_system.useToken)(\"colors\", [startColor, endColor]),\n    _ref3 = _slicedToArray(_ref2, 2),\n    startColorVar = _ref3[0],\n    endColorVar = _ref3[1];\n  var wasPreviouslyLoaded = (0, import_react_use_previous.usePrevious)(isLoaded);\n  var _className = (0, import_shared_utils.cx)(\"chakra-skeleton\", className);\n  var cssVarStyles = _objectSpread({}, startColorVar && _defineProperty({}, $startColor.variable, startColorVar), endColorVar && _defineProperty({}, $endColor.variable, endColorVar));\n  if (isLoaded) {\n    var animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : \"\".concat(fade, \" \").concat(fadeDuration, \"s\");\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, _objectSpread({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(StyledSkeleton, _objectSpread({\n    ref: ref,\n    className: _className\n  }, rest, {\n    __css: _objectSpread({\n      width: fitContent ? \"fit-content\" : void 0\n    }, styles, cssVarStyles, {\n      _dark: _objectSpread({}, styles[\"_dark\"], cssVarStyles),\n      animation: \"\".concat(speed, \"s linear infinite alternate \").concat(bgFade)\n    })\n  }));\n});\n_Skeleton.displayName = \"Skeleton\";\n\n// src/skeleton-text.tsx\nvar import_media_query = require(\"@chakra-ui/media-query\");\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nfunction range(count) {\n  return Array(count).fill(1).map(function (_, index) {\n    return index + 1;\n  });\n}\nvar defaultNoOfLines = 3;\nvar _SkeletonText = function _SkeletonText(props) {\n  var _props$noOfLines = props.noOfLines,\n    noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n    _props$spacing = props.spacing,\n    spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n    _props$skeletonHeight = props.skeletonHeight,\n    skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n    className = props.className,\n    startColor = props.startColor,\n    endColor = props.endColor,\n    isLoaded = props.isLoaded,\n    fadeDuration = props.fadeDuration,\n    speed = props.speed,\n    children = props.children,\n    rest = _objectWithoutProperties(props, [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"children\"]);\n  var noOfLinesValue = (0, import_media_query.useBreakpointValue)(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  var numbers = range(noOfLinesValue);\n  var getWidth = function getWidth(index) {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n    return \"100%\";\n  };\n  var _className = (0, import_shared_utils2.cx)(\"chakra-skeleton__group\", className);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, _objectSpread({\n    className: _className\n  }, rest, {\n    children: numbers.map(function (number, index) {\n      if (isLoaded && index > 0) {\n        return null;\n      }\n      var sizeProps = isLoaded ? null : {\n        mb: number === numbers.length ? \"0\" : spacing,\n        width: getWidth(number),\n        height: skeletonHeight\n      };\n      return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(_Skeleton, _objectSpread({\n        startColor: startColor,\n        endColor: endColor,\n        isLoaded: isLoaded,\n        fadeDuration: fadeDuration,\n        speed: speed\n      }, sizeProps, {\n        children: index === 0 ? children : void 0\n      }), numbers.length.toString() + number);\n    })\n  }));\n};\n_SkeletonText.displayName = \"SkeletonText\";\n\n// src/skeleton-circle.tsx\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar _SkeletonCircle = function _SkeletonCircle(_ref6) {\n  var _ref6$size = _ref6.size,\n    size = _ref6$size === void 0 ? \"2rem\" : _ref6$size,\n    rest = _objectWithoutProperties(_ref6, [\"size\"]);\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(_Skeleton, _objectSpread({\n    borderRadius: \"full\",\n    boxSize: size\n  }, rest));\n};\n_SkeletonCircle.displayName = \"SkeletonCircle\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Skeleton: _Skeleton,\n  SkeletonCircle: _SkeletonCircle,\n  SkeletonText: _SkeletonText\n});","map":null,"metadata":{},"sourceType":"script"}