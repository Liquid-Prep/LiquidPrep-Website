{"ast":null,"code":"import _toConsumableArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/color.ts\nimport { toHex, parseToRgba, transparentize as setTransparency, mix, darken as reduceLightness, lighten as increaseLightness, getContrast, parseToHsla, hsla, getLuminance } from \"color2k\";\n\n// ../../../node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\nfunction dlv_es_default(t, e, l, n, r) {\n  for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++) t = t ? t[e[n]] : r;\n  return t === r ? l : t;\n}\n\n// src/color.ts\nvar isEmptyObject = function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n};\nvar getColor = function getColor(theme, color, fallback) {\n  var hex = dlv_es_default(theme, \"colors.\".concat(color), color);\n  try {\n    toHex(hex);\n    return hex;\n  } catch (_unused) {\n    return fallback != null ? fallback : \"#000000\";\n  }\n};\nvar getBrightness = function getBrightness(color) {\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 3),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2];\n  return (r * 299 + g * 587 + b * 114) / 1e3;\n};\nvar tone = function tone(color) {\n  return function (theme) {\n    var hex = getColor(theme, color);\n    var brightness = getBrightness(hex);\n    var isDark2 = brightness < 128;\n    return isDark2 ? \"dark\" : \"light\";\n  };\n};\nvar isDark = function isDark(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"dark\";\n  };\n};\nvar isLight = function isLight(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"light\";\n  };\n};\nvar transparentize = function transparentize(color, opacity) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return setTransparency(raw, 1 - opacity);\n  };\n};\nvar whiten = function whiten(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return toHex(mix(raw, \"#fff\", amount));\n  };\n};\nvar blacken = function blacken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return toHex(mix(raw, \"#000\", amount / 100));\n  };\n};\nvar darken = function darken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return toHex(reduceLightness(raw, amount / 100));\n  };\n};\nvar lighten = function lighten(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    toHex(increaseLightness(raw, amount / 100));\n  };\n};\nvar contrast = function contrast(fg, bg) {\n  return function (theme) {\n    return getContrast(getColor(theme, bg), getColor(theme, fg));\n  };\n};\nvar isAccessible = function isAccessible(textColor, bgColor, options) {\n  return function (theme) {\n    return isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\n  };\n};\nfunction isReadable(color1, color2) {\n  var wcag2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    level: \"AA\",\n    size: \"small\"\n  };\n  var _a, _b;\n  var readabilityLevel = readability(color1, color2);\n  switch (((_a = wcag2.level) != null ? _a : \"AA\") + ((_b = wcag2.size) != null ? _b : \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5;\n    case \"AAlarge\":\n      return readabilityLevel >= 3;\n    case \"AAAsmall\":\n      return readabilityLevel >= 7;\n    default:\n      return false;\n  }\n}\nfunction readability(color1, color2) {\n  return (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) / (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05);\n}\nvar complementary = function complementary(color) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    var hsl = parseToHsla(raw);\n    var complementHsl = Object.assign(hsl, [(hsl[0] + 180) % 360]);\n    return toHex(hsla.apply(void 0, _toConsumableArray(complementHsl)));\n  };\n};\nfunction generateStripe() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"1rem\";\n  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"rgba(255, 255, 255, 0.15)\";\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \".concat(color, \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \").concat(color, \" 50%,\\n    \").concat(color, \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\"),\n    backgroundSize: \"\".concat(size, \" \").concat(size)\n  };\n}\nvar randomHex = function randomHex() {\n  return \"#\".concat(Math.floor(Math.random() * 16777215).toString(16).padEnd(6, \"0\"));\n};\nfunction randomColor(opts) {\n  var fallback = randomHex();\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n  return fallback;\n}\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  var color = \"#\";\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += \"00\".concat(value.toString(16)).substr(-2);\n  }\n  return color;\n}\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\nexport { getColor, tone, isDark, isLight, transparentize, whiten, blacken, darken, lighten, contrast, isAccessible, isReadable, readability, complementary, generateStripe, randomColor };","map":null,"metadata":{},"sourceType":"module"}