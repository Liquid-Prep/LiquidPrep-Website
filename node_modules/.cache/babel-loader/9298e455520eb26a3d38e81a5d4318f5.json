{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _objectWithoutProperties = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\nvar _objectSpread = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Checkbox: function Checkbox() {\n    return _Checkbox;\n  },\n  CheckboxGroup: function CheckboxGroup() {\n    return _CheckboxGroup;\n  },\n  CheckboxIcon: function CheckboxIcon() {\n    return _CheckboxIcon;\n  },\n  useCheckbox: function useCheckbox() {\n    return _useCheckbox;\n  },\n  useCheckboxGroup: function useCheckboxGroup() {\n    return _useCheckboxGroup;\n  }\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/checkbox.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react2 = require(\"react\");\n\n// src/checkbox-context.ts\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar _ref = (0, import_react_context.createContext)({\n    name: \"CheckboxGroupContext\",\n    strict: false\n  }),\n  _ref2 = _slicedToArray(_ref, 2),\n  CheckboxGroupProvider = _ref2[0],\n  useCheckboxGroupContext = _ref2[1]; // src/checkbox-icon.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction CheckIcon(props) {\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.svg, _objectSpread({\n    width: \"1.2em\",\n    viewBox: \"0 0 12 10\",\n    style: {\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16\n    }\n  }, props, {\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"polyline\", {\n      points: \"1.5 6 4.5 9 10.5 1\"\n    })\n  }));\n}\nfunction IndeterminateIcon(props) {\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.svg, _objectSpread({\n    width: \"1.2em\",\n    viewBox: \"0 0 24 24\",\n    style: {\n      stroke: \"currentColor\",\n      strokeWidth: 4\n    }\n  }, props, {\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"line\", {\n      x1: \"21\",\n      x2: \"3\",\n      y1: \"12\",\n      y2: \"12\"\n    })\n  }));\n}\nfunction _CheckboxIcon(props) {\n  var isIndeterminate = props.isIndeterminate,\n    isChecked = props.isChecked,\n    rest = _objectWithoutProperties(props, [\"isIndeterminate\", \"isChecked\"]);\n  var BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return isChecked || isIndeterminate ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    },\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(BaseIcon, _objectSpread({}, rest))\n  }) : null;\n}\n\n// src/use-checkbox.ts\nvar import_form_control = require(\"@chakra-ui/form-control\");\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react_use_update_effect = require(\"@chakra-ui/react-use-update-effect\");\nvar import_react_use_callback_ref = require(\"@chakra-ui/react-use-callback-ref\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\n\n// ../../utilities/object-utils/src/index.ts\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n  var _iterator2 = _createForOfIteratorHelper(keysToOmit),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      if (key in clone) {\n        delete clone[key];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return clone;\n}\n\n// src/use-checkbox.ts\nvar import_visually_hidden = require(\"@chakra-ui/visually-hidden\");\nvar import_focus_visible = require(\"@zag-js/focus-visible\");\nvar import_react = require(\"react\");\nfunction _useCheckbox() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var formControlProps = (0, import_form_control.useFormControlProps)(props);\n  var isDisabled = formControlProps.isDisabled,\n    isReadOnly = formControlProps.isReadOnly,\n    isRequired = formControlProps.isRequired,\n    isInvalid = formControlProps.isInvalid,\n    id = formControlProps.id,\n    onBlur = formControlProps.onBlur,\n    onFocus = formControlProps.onFocus,\n    ariaDescribedBy = formControlProps[\"aria-describedby\"];\n  var defaultChecked = props.defaultChecked,\n    checkedProp = props.isChecked,\n    isFocusable = props.isFocusable,\n    onChange = props.onChange,\n    isIndeterminate = props.isIndeterminate,\n    name = props.name,\n    value = props.value,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? void 0 : _props$tabIndex,\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledBy = props[\"aria-labelledby\"],\n    ariaInvalid = props[\"aria-invalid\"],\n    rest = _objectWithoutProperties(props, [\"defaultChecked\", \"isChecked\", \"isFocusable\", \"onChange\", \"isIndeterminate\", \"name\", \"value\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\"]);\n  var htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  var onChangeProp = (0, import_react_use_callback_ref.useCallbackRef)(onChange);\n  var onBlurProp = (0, import_react_use_callback_ref.useCallbackRef)(onBlur);\n  var onFocusProp = (0, import_react_use_callback_ref.useCallbackRef)(onFocus);\n  var _ref3 = (0, import_react.useState)(false),\n    _ref4 = _slicedToArray(_ref3, 2),\n    isFocusVisible = _ref4[0],\n    setIsFocusVisible = _ref4[1];\n  var _ref5 = (0, import_react.useState)(false),\n    _ref6 = _slicedToArray(_ref5, 2),\n    isFocused = _ref6[0],\n    setFocused = _ref6[1];\n  var _ref7 = (0, import_react.useState)(false),\n    _ref8 = _slicedToArray(_ref7, 2),\n    isHovered = _ref8[0],\n    setHovered = _ref8[1];\n  var _ref9 = (0, import_react.useState)(false),\n    _ref10 = _slicedToArray(_ref9, 2),\n    isActive = _ref10[0],\n    setActive = _ref10[1];\n  (0, import_react.useEffect)(function () {\n    return (0, import_focus_visible.trackFocusVisible)(setIsFocusVisible);\n  }, []);\n  var inputRef = (0, import_react.useRef)(null);\n  var _ref11 = (0, import_react.useState)(true),\n    _ref12 = _slicedToArray(_ref11, 2),\n    rootIsLabelElement = _ref12[0],\n    setRootIsLabelElement = _ref12[1];\n  var _ref13 = (0, import_react.useState)(!!defaultChecked),\n    _ref14 = _slicedToArray(_ref13, 2),\n    checkedState = _ref14[0],\n    setCheckedState = _ref14[1];\n  var isControlled = checkedProp !== void 0;\n  var isChecked = isControlled ? checkedProp : checkedState;\n  var handleChange = (0, import_react.useCallback)(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  (0, import_react_use_update_effect.useUpdateEffect)(function () {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(function () {\n    var el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n    el.form.onreset = function () {\n      setCheckedState(!!defaultChecked);\n    };\n  }, []);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = (0, import_react.useCallback)(function (event) {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  var onKeyUp = (0, import_react.useCallback)(function (event) {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = (0, import_react.useCallback)(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var onPressDown = function onPressDown(event) {\n      if (isFocused) {\n        event.preventDefault();\n      }\n      setActive(true);\n    };\n    return _objectSpread({}, props2, {\n      ref: forwardedRef,\n      \"data-active\": (0, import_shared_utils.dataAttr)(isActive),\n      \"data-hover\": (0, import_shared_utils.dataAttr)(isHovered),\n      \"data-checked\": (0, import_shared_utils.dataAttr)(isChecked),\n      \"data-focus\": (0, import_shared_utils.dataAttr)(isFocused),\n      \"data-focus-visible\": (0, import_shared_utils.dataAttr)(isFocused && isFocusVisible),\n      \"data-indeterminate\": (0, import_shared_utils.dataAttr)(isIndeterminate),\n      \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n      \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid),\n      \"data-readonly\": (0, import_shared_utils.dataAttr)(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: (0, import_shared_utils.callAllHandlers)(props2.onMouseDown, onPressDown),\n      onMouseUp: (0, import_shared_utils.callAllHandlers)(props2.onMouseUp, function () {\n        return setActive(false);\n      }),\n      onMouseEnter: (0, import_shared_utils.callAllHandlers)(props2.onMouseEnter, function () {\n        return setHovered(true);\n      }),\n      onMouseLeave: (0, import_shared_utils.callAllHandlers)(props2.onMouseLeave, function () {\n        return setHovered(false);\n      })\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  var getRootProps = (0, import_react.useCallback)(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, htmlProps, props2, {\n      ref: (0, import_react_use_merge_refs.mergeRefs)(forwardedRef, function (node) {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, function () {\n        var _a;\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(function () {\n            var _a2;\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n          });\n        }\n      }),\n      \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n      \"data-checked\": (0, import_shared_utils.dataAttr)(isChecked),\n      \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid)\n    });\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  var getInputProps = (0, import_react.useCallback)(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: (0, import_react_use_merge_refs.mergeRefs)(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      id: id,\n      tabIndex: tabIndex,\n      onChange: (0, import_shared_utils.callAllHandlers)(props2.onChange, handleChange),\n      onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, onBlurProp, function () {\n        return setFocused(false);\n      }),\n      onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onFocusProp, function () {\n        return setFocused(true);\n      }),\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown),\n      onKeyUp: (0, import_shared_utils.callAllHandlers)(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: import_visually_hidden.visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  var getLabelProps = (0, import_react.useCallback)(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: forwardedRef,\n      onMouseDown: (0, import_shared_utils.callAllHandlers)(props2.onMouseDown, stopEvent),\n      onTouchStart: (0, import_shared_utils.callAllHandlers)(props2.onTouchStart, stopEvent),\n      \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n      \"data-checked\": (0, import_shared_utils.dataAttr)(isChecked),\n      \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  var state = {\n    isInvalid: isInvalid,\n    isFocused: isFocused,\n    isChecked: isChecked,\n    isActive: isActive,\n    isHovered: isHovered,\n    isIndeterminate: isIndeterminate,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  };\n  return {\n    state: state,\n    getRootProps: getRootProps,\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n// src/checkbox.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = (0, import_system2.keyframes)({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = (0, import_system2.keyframes)({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = (0, import_system2.keyframes)({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar _Checkbox = (0, import_system2.forwardRef)(function Checkbox2(props, ref) {\n  var group = useCheckboxGroupContext();\n  var mergedProps = _objectSpread({}, group, props);\n  var styles = (0, import_system2.useMultiStyleConfig)(\"Checkbox\", mergedProps);\n  var ownProps = (0, import_system2.omitThemingProps)(props);\n  var _ownProps$spacing = ownProps.spacing,\n    spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n    className = ownProps.className,\n    children = ownProps.children,\n    iconColor = ownProps.iconColor,\n    iconSize = ownProps.iconSize,\n    _ownProps$icon = ownProps.icon,\n    icon = _ownProps$icon === void 0 ? /* @__PURE__ */(0, import_jsx_runtime2.jsx)(_CheckboxIcon, {}) : _ownProps$icon,\n    isCheckedProp = ownProps.isChecked,\n    _ownProps$isDisabled = ownProps.isDisabled,\n    isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n    onChangeProp = ownProps.onChange,\n    inputProps = ownProps.inputProps,\n    rest = _objectWithoutProperties(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\", \"inputProps\"]);\n  var isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  var onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = (0, import_shared_utils2.callAll)(group.onChange, onChangeProp);\n  }\n  var _useCheckbox2 = _useCheckbox(_objectSpread({}, rest, {\n      isDisabled: isDisabled,\n      isChecked: isChecked,\n      onChange: onChange\n    })),\n    state = _useCheckbox2.state,\n    getInputProps = _useCheckbox2.getInputProps,\n    getCheckboxProps = _useCheckbox2.getCheckboxProps,\n    getLabelProps = _useCheckbox2.getLabelProps,\n    getRootProps = _useCheckbox2.getRootProps;\n  var iconStyles = (0, import_react2.useMemo)(function () {\n    return _objectSpread({\n      animation: state.isIndeterminate ? \"\".concat(indeterminateOpacityAnim, \" 20ms linear, \").concat(indeterminateScaleAnim, \" 200ms linear\") : \"\".concat(checkAnim, \" 200ms linear\"),\n      fontSize: iconSize,\n      color: iconColor\n    }, styles.icon);\n  }, [iconColor, iconSize,, state.isIndeterminate, styles.icon]);\n  var clonedIcon = (0, import_react2.cloneElement)(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsxs)(import_system2.chakra.label, _objectSpread({\n    __css: _objectSpread({}, rootStyles, styles.container),\n    className: (0, import_shared_utils2.cx)(\"chakra-checkbox\", className)\n  }, getRootProps(), {\n    children: [/* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"input\", _objectSpread({\n      className: \"chakra-checkbox__input\"\n    }, getInputProps(inputProps, ref))), /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.span, _objectSpread({\n      __css: _objectSpread({}, controlStyles, styles.control),\n      className: \"chakra-checkbox__control\"\n    }, getCheckboxProps(), {\n      children: clonedIcon\n    })), children && /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.span, _objectSpread({\n      className: \"chakra-checkbox__label\"\n    }, getLabelProps(), {\n      __css: _objectSpread({\n        marginStart: spacing\n      }, styles.label),\n      children: children\n    }))]\n  }));\n});\n_Checkbox.displayName = \"Checkbox\";\n\n// src/checkbox-group.tsx\nvar import_react4 = require(\"react\");\n\n// src/use-checkbox-group.ts\nvar import_react_use_callback_ref2 = require(\"@chakra-ui/react-use-callback-ref\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_react3 = require(\"react\");\nfunction isInputEvent(value) {\n  return value && (0, import_shared_utils3.isObject)(value) && (0, import_shared_utils3.isObject)(value.target);\n}\nfunction _useCheckboxGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultValue = props.defaultValue,\n    valueProp = props.value,\n    onChange = props.onChange,\n    isDisabled = props.isDisabled,\n    isNative = props.isNative;\n  var onChangeProp = (0, import_react_use_callback_ref2.useCallbackRef)(onChange);\n  var _ref15 = (0, import_react_use_controllable_state.useControllableState)({\n      value: valueProp,\n      defaultValue: defaultValue || [],\n      onChange: onChangeProp\n    }),\n    _ref16 = _slicedToArray(_ref15, 2),\n    value = _ref16[0],\n    setValue = _ref16[1];\n  var handleChange = (0, import_react3.useCallback)(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? [].concat(_toConsumableArray(value), [selectedValue]) : value.filter(function (v) {\n      return String(v) !== String(selectedValue);\n    });\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = (0, import_react3.useCallback)(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _objectSpread({}, props2, (_objectSpread2 = {}, _defineProperty(_objectSpread2, checkedKey, value.some(function (val) {\n      return String(props2.value) === String(val);\n    })), _defineProperty(_objectSpread2, \"onChange\", handleChange), _objectSpread2));\n  }, [handleChange, isNative, value]);\n  return {\n    value: value,\n    isDisabled: isDisabled,\n    onChange: handleChange,\n    setValue: setValue,\n    getCheckboxProps: getCheckboxProps\n  };\n}\n\n// src/checkbox-group.tsx\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nfunction _CheckboxGroup(props) {\n  var colorScheme = props.colorScheme,\n    size = props.size,\n    variant = props.variant,\n    children = props.children,\n    isDisabled = props.isDisabled;\n  var _useCheckboxGroup2 = _useCheckboxGroup(props),\n    value = _useCheckboxGroup2.value,\n    onChange = _useCheckboxGroup2.onChange;\n  var group = (0, import_react4.useMemo)(function () {\n    return {\n      size: size,\n      onChange: onChange,\n      colorScheme: colorScheme,\n      value: value,\n      variant: variant,\n      isDisabled: isDisabled\n    };\n  }, [size, onChange, colorScheme, value, variant, isDisabled]);\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(CheckboxGroupProvider, {\n    value: group,\n    children: children\n  });\n}\n_CheckboxGroup.displayName = \"CheckboxGroup\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Checkbox: _Checkbox,\n  CheckboxGroup: _CheckboxGroup,\n  CheckboxIcon: _CheckboxIcon,\n  useCheckbox: _useCheckbox,\n  useCheckboxGroup: _useCheckboxGroup\n});","map":null,"metadata":{},"sourceType":"script"}