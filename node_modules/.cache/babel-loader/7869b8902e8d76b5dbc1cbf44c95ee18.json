{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  addDomEvent: function addDomEvent() {\n    return _addDomEvent;\n  },\n  addPointerEvent: function addPointerEvent() {\n    return _addPointerEvent;\n  },\n  getEventPoint: function getEventPoint() {\n    return _getEventPoint;\n  },\n  isMouseEvent: function isMouseEvent() {\n    return _isMouseEvent;\n  },\n  isMultiTouchEvent: function isMultiTouchEvent() {\n    return _isMultiTouchEvent;\n  },\n  isTouchEvent: function isTouchEvent() {\n    return _isTouchEvent;\n  }\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/add-dom-event.ts\nfunction _addDomEvent(target, eventName, handler, options) {\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    target.removeEventListener(eventName, handler, options);\n  };\n}\n\n// src/assertion.ts\nfunction _isMouseEvent(event) {\n  var win = getEventWindow(event);\n  if (typeof win.PointerEvent !== \"undefined\" && event instanceof win.PointerEvent) {\n    return !!(event.pointerType === \"mouse\");\n  }\n  return event instanceof win.MouseEvent;\n}\nfunction _isTouchEvent(event) {\n  var hasTouches = !!event.touches;\n  return hasTouches;\n}\nfunction _isMultiTouchEvent(event) {\n  return _isTouchEvent(event) && event.touches.length > 1;\n}\nfunction getEventWindow(event) {\n  var _a;\n  return (_a = event.view) != null ? _a : window;\n}\n\n// src/get-event-point.ts\nfunction pointFromTouch(e) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  var point = e.touches[0] || e.changedTouches[0];\n  return {\n    x: point[\"\".concat(type, \"X\")],\n    y: point[\"\".concat(type, \"Y\")]\n  };\n}\nfunction pointFromMouse(point) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  return {\n    x: point[\"\".concat(type, \"X\")],\n    y: point[\"\".concat(type, \"Y\")]\n  };\n}\nfunction _getEventPoint(event) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  return _isTouchEvent(event) ? pointFromTouch(event, type) : pointFromMouse(event, type);\n}\n\n// src/add-pointer-event.ts\nfunction filter(cb) {\n  return function (event) {\n    var isMouse = _isMouseEvent(event);\n    if (!isMouse || isMouse && event.button === 0) {\n      cb(event);\n    }\n  };\n}\nfunction wrap(cb) {\n  var filterPrimary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  function listener(event) {\n    cb(event, {\n      point: _getEventPoint(event)\n    });\n  }\n  var fn = filterPrimary ? filter(listener) : listener;\n  return fn;\n}\nfunction _addPointerEvent(target, type, cb, options) {\n  return _addDomEvent(target, type, wrap(cb, type === \"pointerdown\"), options);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  addDomEvent: _addDomEvent,\n  addPointerEvent: _addPointerEvent,\n  getEventPoint: _getEventPoint,\n  isMouseEvent: _isMouseEvent,\n  isMultiTouchEvent: _isMultiTouchEvent,\n  isTouchEvent: _isTouchEvent\n});","map":null,"metadata":{},"sourceType":"script"}