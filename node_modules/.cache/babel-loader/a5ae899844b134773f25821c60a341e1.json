{"ast":null,"code":"import _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useControllableProp(prop, state) {\n  var controlled = typeof prop !== \"undefined\";\n  var value = controlled ? prop : state;\n  return useMemo(function () {\n    return [controlled, value];\n  }, [controlled, value]);\n}\nfunction useControllableState(props) {\n  var valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChange = props.onChange,\n    _props$shouldUpdate = props.shouldUpdate,\n    shouldUpdate = _props$shouldUpdate === void 0 ? function (prev, next) {\n      return prev !== next;\n    } : _props$shouldUpdate;\n  var onChangeProp = useCallbackRef(onChange);\n  var shouldUpdateProp = useCallbackRef(shouldUpdate);\n  var _useState = useState(defaultValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    uncontrolledState = _useState2[0],\n    setUncontrolledState = _useState2[1];\n  var controlled = valueProp !== void 0;\n  var value = controlled ? valueProp : uncontrolledState;\n  var setValue = useCallbackRef(function (next) {\n    var setter = next;\n    var nextValue = typeof next === \"function\" ? setter(value) : next;\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\nexport { useControllableProp, useControllableState };","map":null,"metadata":{},"sourceType":"module"}