{"ast":null,"code":"// src/index.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\nfunction getErrorMessage(hook, provider) {\n  return \"\".concat(hook, \" returned `undefined`. Seems you forgot to wrap component within \").concat(provider);\n}\nfunction createContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var name = options.name,\n    _options$strict = options.strict,\n    strict = _options$strict === void 0 ? true : _options$strict,\n    _options$hookName = options.hookName,\n    hookName = _options$hookName === void 0 ? \"useContext\" : _options$hookName,\n    _options$providerName = options.providerName,\n    providerName = _options$providerName === void 0 ? \"Provider\" : _options$providerName,\n    errorMessage = options.errorMessage;\n  var Context = createReactContext(void 0);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    var context = useReactContext(Context);\n    if (!context && strict) {\n      var error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\nexport { createContext };","map":null,"metadata":{},"sourceType":"module"}