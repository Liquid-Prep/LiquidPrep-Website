{"ast":null,"code":"import _objectWithoutProperties from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { innerArrow, matchWidth, positionArrow, transformOrigin } from \"./chunk-SSFABIB2.mjs\";\nimport { getPopperPlacement } from \"./chunk-6DG2E3QO.mjs\";\nimport { cssVars, getEventListenerOptions } from \"./chunk-QAKUNGSB.mjs\";\n\n// src/use-popper.ts\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { createPopper } from \"@popperjs/core\";\nimport { useCallback, useEffect, useRef } from \"react\";\nfunction usePopper() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$enabled = props.enabled,\n    enabled = _props$enabled === void 0 ? true : _props$enabled,\n    modifiers = props.modifiers,\n    _props$placement = props.placement,\n    placementProp = _props$placement === void 0 ? \"bottom\" : _props$placement,\n    _props$strategy = props.strategy,\n    strategy = _props$strategy === void 0 ? \"absolute\" : _props$strategy,\n    _props$arrowPadding = props.arrowPadding,\n    arrowPadding = _props$arrowPadding === void 0 ? 8 : _props$arrowPadding,\n    _props$eventListeners = props.eventListeners,\n    eventListeners = _props$eventListeners === void 0 ? true : _props$eventListeners,\n    offset = props.offset,\n    _props$gutter = props.gutter,\n    gutter = _props$gutter === void 0 ? 8 : _props$gutter,\n    _props$flip = props.flip,\n    flip = _props$flip === void 0 ? true : _props$flip,\n    _props$boundary = props.boundary,\n    boundary = _props$boundary === void 0 ? \"clippingParents\" : _props$boundary,\n    _props$preventOverflo = props.preventOverflow,\n    preventOverflow = _props$preventOverflo === void 0 ? true : _props$preventOverflo,\n    matchWidth2 = props.matchWidth,\n    _props$direction = props.direction,\n    direction = _props$direction === void 0 ? \"ltr\" : _props$direction;\n  var reference = useRef(null);\n  var popper = useRef(null);\n  var instance = useRef(null);\n  var placement = getPopperPlacement(placementProp, direction);\n  var cleanup = useRef(function () {});\n  var setupPopper = useCallback(function () {\n    var _a;\n    if (!enabled || !reference.current || !popper.current) return;\n    (_a = cleanup.current) == null ? void 0 : _a.call(cleanup);\n    instance.current = createPopper(reference.current, popper.current, {\n      placement: placement,\n      modifiers: [innerArrow, positionArrow, transformOrigin, _objectSpread({}, matchWidth, {\n        enabled: !!matchWidth2\n      }), _objectSpread({\n        name: \"eventListeners\"\n      }, getEventListenerOptions(eventListeners)), {\n        name: \"arrow\",\n        options: {\n          padding: arrowPadding\n        }\n      }, {\n        name: \"offset\",\n        options: {\n          offset: offset != null ? offset : [0, gutter]\n        }\n      }, {\n        name: \"flip\",\n        enabled: !!flip,\n        options: {\n          padding: 8\n        }\n      }, {\n        name: \"preventOverflow\",\n        enabled: !!preventOverflow,\n        options: {\n          boundary: boundary\n        }\n      }].concat(_toConsumableArray(modifiers != null ? modifiers : [])),\n      strategy: strategy\n    });\n    instance.current.forceUpdate();\n    cleanup.current = instance.current.destroy;\n  }, [placement, enabled, modifiers, matchWidth2, eventListeners, arrowPadding, offset, gutter, flip, preventOverflow, boundary, strategy]);\n  useEffect(function () {\n    return function () {\n      var _a;\n      if (!reference.current && !popper.current) {\n        (_a = instance.current) == null ? void 0 : _a.destroy();\n        instance.current = null;\n      }\n    };\n  }, []);\n  var referenceRef = useCallback(function (node) {\n    reference.current = node;\n    setupPopper();\n  }, [setupPopper]);\n  var getReferenceProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: mergeRefs(referenceRef, ref)\n    });\n  }, [referenceRef]);\n  var popperRef = useCallback(function (node) {\n    popper.current = node;\n    setupPopper();\n  }, [setupPopper]);\n  var getPopperProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: mergeRefs(popperRef, ref),\n      style: _objectSpread({}, props2.style, {\n        position: strategy,\n        minWidth: matchWidth2 ? void 0 : \"max-content\",\n        inset: \"0 auto auto 0\"\n      })\n    });\n  }, [strategy, popperRef, matchWidth2]);\n  var getArrowProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var size = props2.size,\n      shadowColor = props2.shadowColor,\n      bg = props2.bg,\n      style = props2.style,\n      rest = _objectWithoutProperties(props2, [\"size\", \"shadowColor\", \"bg\", \"style\"]);\n    return _objectSpread({}, rest, {\n      ref: ref,\n      \"data-popper-arrow\": \"\",\n      style: getArrowStyle(props2)\n    });\n  }, []);\n  var getArrowInnerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: ref,\n      \"data-popper-arrow-inner\": \"\"\n    });\n  }, []);\n  return {\n    update: function update() {\n      var _a;\n      (_a = instance.current) == null ? void 0 : _a.update();\n    },\n    forceUpdate: function forceUpdate() {\n      var _a;\n      (_a = instance.current) == null ? void 0 : _a.forceUpdate();\n    },\n    transformOrigin: cssVars.transformOrigin.varRef,\n    referenceRef: referenceRef,\n    popperRef: popperRef,\n    getPopperProps: getPopperProps,\n    getArrowProps: getArrowProps,\n    getArrowInnerProps: getArrowInnerProps,\n    getReferenceProps: getReferenceProps\n  };\n}\nfunction getArrowStyle(props) {\n  var size = props.size,\n    shadowColor = props.shadowColor,\n    bg = props.bg,\n    style = props.style;\n  var computedStyle = _objectSpread({}, style, {\n    position: \"absolute\"\n  });\n  if (size) {\n    computedStyle[\"--popper-arrow-size\"] = size;\n  }\n  if (shadowColor) {\n    computedStyle[\"--popper-arrow-shadow-color\"] = shadowColor;\n  }\n  if (bg) {\n    computedStyle[\"--popper-arrow-bg\"] = bg;\n  }\n  return computedStyle;\n}\nexport { usePopper };","map":null,"metadata":{},"sourceType":"module"}