{"ast":null,"code":"import _objectSpread from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { useFormControlContext } from \"./chunk-PXXQR4UW.mjs\";\n\n// src/use-form-control.ts\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nfunction useFormControl(props) {\n  var _useFormControlProps = useFormControlProps(props),\n    isDisabled = _useFormControlProps.isDisabled,\n    isInvalid = _useFormControlProps.isInvalid,\n    isReadOnly = _useFormControlProps.isReadOnly,\n    isRequired = _useFormControlProps.isRequired,\n    rest = _objectWithoutProperties(_useFormControlProps, [\"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isRequired\"]);\n  return _objectSpread({}, rest, {\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  });\n}\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n  var field = useFormControlContext();\n  var id = props.id,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    required = props.required,\n    isRequired = props.isRequired,\n    isInvalid = props.isInvalid,\n    isReadOnly = props.isReadOnly,\n    isDisabled = props.isDisabled,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    rest = _objectWithoutProperties(props, [\"id\", \"disabled\", \"readOnly\", \"required\", \"isRequired\", \"isInvalid\", \"isReadOnly\", \"isDisabled\", \"onFocus\", \"onBlur\"]);\n  var labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return _objectSpread({}, rest, {\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  });\n}\nexport { useFormControl, useFormControlProps };","map":null,"metadata":{},"sourceType":"module"}