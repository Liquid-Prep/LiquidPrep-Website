{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ColorModeContext: function ColorModeContext() {\n    return _ColorModeContext;\n  },\n  ColorModeProvider: function ColorModeProvider() {\n    return _ColorModeProvider;\n  },\n  ColorModeScript: function ColorModeScript() {\n    return _ColorModeScript;\n  },\n  DarkMode: function DarkMode() {\n    return _DarkMode;\n  },\n  LightMode: function LightMode() {\n    return _LightMode;\n  },\n  cookieStorageManager: function cookieStorageManager() {\n    return _cookieStorageManager;\n  },\n  cookieStorageManagerSSR: function cookieStorageManagerSSR() {\n    return _cookieStorageManagerSSR;\n  },\n  createCookieStorageManager: function createCookieStorageManager() {\n    return _createCookieStorageManager;\n  },\n  createLocalStorageManager: function createLocalStorageManager() {\n    return _createLocalStorageManager;\n  },\n  getScriptSrc: function getScriptSrc() {\n    return _getScriptSrc;\n  },\n  localStorageManager: function localStorageManager() {\n    return _localStorageManager;\n  },\n  useColorMode: function useColorMode() {\n    return _useColorMode;\n  },\n  useColorModeValue: function useColorModeValue() {\n    return _useColorModeValue;\n  }\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/color-mode-provider.tsx\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react2 = require(\"react\");\n\n// src/color-mode-context.ts\nvar import_react = require(\"react\");\nvar _ColorModeContext = (0, import_react.createContext)({});\n_ColorModeContext.displayName = \"ColorModeContext\";\nfunction _useColorMode() {\n  var context = (0, import_react.useContext)(_ColorModeContext);\n  if (context === void 0) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n}\nfunction _useColorModeValue(light, dark) {\n  var _useColorMode2 = _useColorMode(),\n    colorMode = _useColorMode2.colorMode;\n  return colorMode === \"dark\" ? dark : light;\n}\n\n// src/color-mode.utils.ts\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\nfunction getColorModeUtils() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$preventTrans = options.preventTransition,\n    preventTransition = _options$preventTrans === void 0 ? true : _options$preventTrans;\n  var utils = {\n    setDataset: function setDataset(value) {\n      var cleanup = preventTransition ? utils.preventTransition() : void 0;\n      document.documentElement.dataset.theme = value;\n      document.documentElement.style.colorScheme = value;\n      cleanup == null ? void 0 : cleanup();\n    },\n    setClassName: function setClassName(dark) {\n      document.body.classList.add(dark ? classNames.dark : classNames.light);\n      document.body.classList.remove(dark ? classNames.light : classNames.dark);\n    },\n    query: function query() {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\");\n    },\n    getSystemTheme: function getSystemTheme(fallback) {\n      var _a;\n      var dark = (_a = utils.query().matches) != null ? _a : fallback === \"dark\";\n      return dark ? \"dark\" : \"light\";\n    },\n    addListener: function addListener(fn) {\n      var mql = utils.query();\n      var listener = function listener(e) {\n        fn(e.matches ? \"dark\" : \"light\");\n      };\n      if (typeof mql.addListener === \"function\") mql.addListener(listener);else mql.addEventListener(\"change\", listener);\n      return function () {\n        if (typeof mql.removeListener === \"function\") mql.removeListener(listener);else mql.removeEventListener(\"change\", listener);\n      };\n    },\n    preventTransition: function preventTransition() {\n      var css = document.createElement(\"style\");\n      css.appendChild(document.createTextNode(\"*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}\"));\n      document.head.appendChild(css);\n      return function () {\n        ;\n        (function () {\n          return window.getComputedStyle(document.body);\n        })();\n        requestAnimationFrame(function () {\n          requestAnimationFrame(function () {\n            document.head.removeChild(css);\n          });\n        });\n      };\n    }\n  };\n  return utils;\n}\n\n// src/storage-manager.ts\nvar STORAGE_KEY = \"chakra-ui-color-mode\";\nfunction _createLocalStorageManager(key) {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get: function get(init) {\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      var value;\n      try {\n        value = localStorage.getItem(key) || init;\n      } catch (e) {}\n      return value || init;\n    },\n    set: function set(value) {\n      try {\n        localStorage.setItem(key, value);\n      } catch (e) {}\n    }\n  };\n}\nvar _localStorageManager = _createLocalStorageManager(STORAGE_KEY);\nfunction parseCookie(cookie, key) {\n  var match = cookie.match(new RegExp(\"(^| )\".concat(key, \"=([^;]+)\")));\n  return match == null ? void 0 : match[2];\n}\nfunction _createCookieStorageManager(key, cookie) {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get: function get(init) {\n      if (cookie) return parseCookie(cookie, key);\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      return parseCookie(document.cookie, key) || init;\n    },\n    set: function set(value) {\n      document.cookie = \"\".concat(key, \"=\").concat(value, \"; max-age=31536000; path=/\");\n    }\n  };\n}\nvar _cookieStorageManager = _createCookieStorageManager(STORAGE_KEY);\nvar _cookieStorageManagerSSR = function _cookieStorageManagerSSR(cookie) {\n  return _createCookieStorageManager(STORAGE_KEY, cookie);\n};\n\n// src/color-mode-provider.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar noop = function noop() {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction _ColorModeProvider(props) {\n  var value = props.value,\n    children = props.children,\n    _props$options = props.options,\n    _props$options2 = _props$options === void 0 ? {} : _props$options,\n    useSystemColorMode = _props$options2.useSystemColorMode,\n    initialColorMode = _props$options2.initialColorMode,\n    disableTransitionOnChange = _props$options2.disableTransitionOnChange,\n    _props$colorModeManag = props.colorModeManager,\n    colorModeManager = _props$colorModeManag === void 0 ? _localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  var _ref = (0, import_react2.useState)(function () {\n      return getTheme(colorModeManager, defaultColorMode);\n    }),\n    _ref2 = _slicedToArray(_ref, 2),\n    colorMode = _ref2[0],\n    rawSetColorMode = _ref2[1];\n  var _ref3 = (0, import_react2.useState)(function () {\n      return getTheme(colorModeManager);\n    }),\n    _ref4 = _slicedToArray(_ref3, 2),\n    resolvedColorMode = _ref4[0],\n    setResolvedColorMode = _ref4[1];\n  var _ref5 = (0, import_react2.useMemo)(function () {\n      return getColorModeUtils({\n        preventTransition: disableTransitionOnChange\n      });\n    }, [disableTransitionOnChange]),\n    getSystemTheme = _ref5.getSystemTheme,\n    setClassName = _ref5.setClassName,\n    setDataset = _ref5.setDataset,\n    addListener = _ref5.addListener;\n  var resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  var setColorMode = (0, import_react2.useCallback)(function (value2) {\n    var resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(function () {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  (0, import_react2.useEffect)(function () {\n    var managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  var toggleColorMode = (0, import_react2.useCallback)(function () {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  (0, import_react2.useEffect)(function () {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  var context = (0, import_react2.useMemo)(function () {\n    return {\n      colorMode: value != null ? value : resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    };\n  }, [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(_ColorModeContext.Provider, {\n    value: context,\n    children: children\n  });\n}\n_ColorModeProvider.displayName = \"ColorModeProvider\";\nfunction _DarkMode(props) {\n  var context = (0, import_react2.useMemo)(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(_ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\n_DarkMode.displayName = \"DarkMode\";\nfunction _LightMode(props) {\n  var context = (0, import_react2.useMemo)(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(_ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\n_LightMode.displayName = \"LightMode\";\n\n// src/color-mode-script.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar VALID_VALUES = /* @__PURE__ */new Set([\"dark\", \"light\", \"system\"]);\nfunction normalize(initialColorMode) {\n  var value = initialColorMode;\n  if (!VALID_VALUES.has(value)) value = \"light\";\n  return value;\n}\nfunction _getScriptSrc() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$initialColorMo = props.initialColorMode,\n    initialColorMode = _props$initialColorMo === void 0 ? \"light\" : _props$initialColorMo,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"localStorage\" : _props$type,\n    _props$storageKey = props.storageKey,\n    key = _props$storageKey === void 0 ? \"chakra-ui-color-mode\" : _props$storageKey;\n  var init = normalize(initialColorMode);\n  var isCookie = type === \"cookie\";\n  var cookieScript = \"(function(){try{var a=function(o){var l=\\\"(prefers-color-scheme: dark)\\\",v=window.matchMedia(l).matches?\\\"dark\\\":\\\"light\\\",e=o===\\\"system\\\"?v:o,d=document.documentElement,m=document.body,i=\\\"chakra-ui-light\\\",n=\\\"chakra-ui-dark\\\",s=e===\\\"dark\\\";return m.classList.add(s?n:i),m.classList.remove(s?i:n),d.style.colorScheme=e,d.dataset.theme=e,e},u=a,h=\\\"\".concat(init, \"\\\",r=\\\"\").concat(key, \"\\\",t=document.cookie.match(new RegExp(\\\"(^| )\\\".concat(r,\\\"=([^;]+)\\\"))),c=t?t[2]:null;c?a(c):document.cookie=\\\"\\\".concat(r,\\\"=\\\").concat(a(h),\\\"; max-age=31536000; path=/\\\")}catch(a){}})();\\n  \");\n  var localStorageScript = \"(function(){try{var a=function(c){var v=\\\"(prefers-color-scheme: dark)\\\",h=window.matchMedia(v).matches?\\\"dark\\\":\\\"light\\\",r=c===\\\"system\\\"?h:c,o=document.documentElement,s=document.body,l=\\\"chakra-ui-light\\\",d=\\\"chakra-ui-dark\\\",i=r===\\\"dark\\\";return s.classList.add(i?d:l),s.classList.remove(i?l:d),o.style.colorScheme=r,o.dataset.theme=r,r},n=a,m=\\\"\".concat(init, \"\\\",e=\\\"\").concat(key, \"\\\",t=localStorage.getItem(e);t?a(t):localStorage.setItem(e,a(m))}catch(a){}})();\\n  \");\n  var fn = isCookie ? cookieScript : localStorageScript;\n  return \"!\".concat(fn).trim();\n}\nfunction _ColorModeScript() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var nonce = props.nonce;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"script\", {\n    id: \"chakra-script\",\n    nonce: nonce,\n    dangerouslySetInnerHTML: {\n      __html: _getScriptSrc(props)\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ColorModeContext: _ColorModeContext,\n  ColorModeProvider: _ColorModeProvider,\n  ColorModeScript: _ColorModeScript,\n  DarkMode: _DarkMode,\n  LightMode: _LightMode,\n  cookieStorageManager: _cookieStorageManager,\n  cookieStorageManagerSSR: _cookieStorageManagerSSR,\n  createCookieStorageManager: _createCookieStorageManager,\n  createLocalStorageManager: _createLocalStorageManager,\n  getScriptSrc: _getScriptSrc,\n  localStorageManager: _localStorageManager,\n  useColorMode: _useColorMode,\n  useColorModeValue: _useColorModeValue\n});","map":null,"metadata":{},"sourceType":"script"}