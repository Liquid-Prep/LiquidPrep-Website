{"ast":null,"code":"import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor(elementId) {\n      let latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      this.isTransformDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this or any\n       * child might need recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = () => {\n        this.nodes.forEach(propagateDirtyNodes);\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n      return this.eventHandlers.get(name).add(handler);\n    }\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      subscriptionManager && subscriptionManager.notify(...args);\n    }\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n    registerPotentialNode(elementId, node) {\n      this.potentialNodes.set(elementId, node);\n    }\n    /**\n     * Lifecycles\n     */\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n      this.root.nodes.add(this);\n      this.parent && this.parent.children.add(this);\n      this.elementId && this.root.potentialNodes.delete(this.elementId);\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n      if (attachResizeListener) {\n        let cancelDelay;\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      }\n      // Only register the handler if it requires layout animation\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          }\n          // TODO: Check here if an animation exists\n          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = {\n              ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              finishAnimation(this);\n            }\n            if (this.isLead() && this.options.onExitComplete) {\n              this.options.onExitComplete();\n            }\n          }\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n    unmount() {\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      const stack = this.getStack();\n      stack && stack.remove(this);\n      this.parent && this.parent.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    }\n    // only on the root\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n    isTreeAnimationBlocked() {\n      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n    }\n    // Note: currently only running on root node\n    startUpdate() {\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      this.nodes && this.nodes.forEach(resetRotation);\n      this.animationId++;\n    }\n    getTransformTemplate() {\n      const {\n        visualElement\n      } = this.options;\n      return visualElement && visualElement.getProps().transformTemplate;\n    }\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.root.isUpdateBlocked()) {\n        this.options.onExitComplete && this.options.onExitComplete();\n        return;\n      }\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        node.updateScroll(\"snapshot\");\n        if (node.options.layoutRoot) {\n          node.willUpdate(false);\n        }\n      }\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = this.getTransformTemplate();\n      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    }\n    // Note: Currently only running on root node\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked();\n      // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      // Flush any scheduled updates\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    }\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n    scheduleUpdateProjection() {\n      sync.preRender(this.updateProjection, false, true);\n    }\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n    }\n    updateLayout() {\n      if (!this.instance) return;\n      // TODO: Incorporate into a forwarded scroll offset\n      this.updateScroll();\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      const {\n        visualElement\n      } = this.options;\n      visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n    }\n    updateScroll() {\n      let phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n        needsMeasurement = false;\n      }\n      if (needsMeasurement) {\n        this.scroll = {\n          animationId: this.root.animationId,\n          phase,\n          isRoot: checkIsScrollRoot(this.instance),\n          offset: measureScroll(this.instance)\n        };\n      }\n    }\n    resetTransform() {\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = this.getTransformTemplate();\n      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n    measure() {\n      let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\n       * Measurements taken during the pre-render stage\n       * still have transforms applied so we remove them\n       * via calculation.\n       */\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n      roundBox(layoutBox);\n      return {\n        animationId: this.root.animationId,\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {},\n        source: this.id\n      };\n    }\n    measurePageBox() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox();\n      // Remove viewport scroll to give page-relative coordinates\n      const {\n        scroll\n      } = this.root;\n      if (scroll) {\n        translateAxis(box.x, scroll.offset.x);\n        translateAxis(box.y, scroll.offset.y);\n      }\n      return box;\n    }\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options\n        } = node;\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (scroll.isRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n            }\n          }\n          translateAxis(boxWithoutScroll.x, scroll.offset.x);\n          translateAxis(boxWithoutScroll.y, scroll.offset.y);\n        }\n      }\n      return boxWithoutScroll;\n    }\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.offset.x,\n            y: -node.scroll.offset.y\n          });\n        }\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n      return withTransforms;\n    }\n    removeTransform(box) {\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n      }\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n      return boxWithoutTransform;\n    }\n    /**\n     *\n     */\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.isProjectionDirty = true;\n      this.root.scheduleUpdateProjection();\n    }\n    setOptions(options) {\n      this.options = {\n        ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    /**\n     * Frame calculations\n     */\n    resolveTargetDelta() {\n      /**\n       * Once the dirty status of nodes has been spread through the tree, we also\n       * need to check if we have a shared node of a different depth that has itself\n       * been dirtied.\n       */\n      const lead = this.getLead();\n      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n      /**\n       * We don't use transform for this step of processing so we don't\n       * need to check whether any nodes have changed transform.\n       */\n      if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        const relativeParent = this.getClosestProjectingParent();\n        if (relativeParent && relativeParent.layout) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {\n          this.relativeParent = relativeParent;\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n    }\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n        return undefined;\n      }\n      if ((this.parent.relativeTarget || this.parent.targetDelta || this.parent.options.layoutRoot) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n    calcProjection() {\n      const {\n        isProjectionDirty,\n        isTransformDirty\n      } = this;\n      this.isProjectionDirty = this.isTransformDirty = false;\n      const lead = this.getLead();\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      let canSkip = true;\n      if (isProjectionDirty) canSkip = false;\n      if (isShared && isTransformDirty) canSkip = false;\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    }\n    hide() {\n      this.isVisible = false;\n      // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true;\n      // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.options.scheduleRender && this.options.scheduleRender();\n      if (notifyAll) {\n        const stack = this.getStack();\n        stack && stack.scheduleRender();\n      }\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n      const mixedValues = {\n        ...this.latestValues\n      };\n      const targetDelta = createDelta();\n      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n      }\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const snapshotSource = snapshot ? snapshot.source : undefined;\n      const layoutSource = this.layout ? this.layout.source : undefined;\n      const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n      const stack = this.getStack();\n      const isOnlyMember = !stack || stack.members.length <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      this.mixTargetDelta = latest => {\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n        }\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n    }\n    startAnimation(options) {\n      this.notifyListeners(\"animationStart\");\n      this.currentAnimation && this.currentAnimation.stop();\n      if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n        this.resumingFrom.currentAnimation.stop();\n      }\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n      this.pendingAnimation = sync.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animate(0, animationTarget, {\n          ...options,\n          onUpdate: latest => {\n            this.mixTargetDelta(latest);\n            options.onUpdate && options.onUpdate(latest);\n          },\n          onComplete: () => {\n            options.onComplete && options.onComplete();\n            this.completeAnimation();\n          }\n        });\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n        this.pendingAnimation = undefined;\n      });\n    }\n    completeAnimation() {\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n      const stack = this.getStack();\n      stack && stack.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n    finishAnimation() {\n      if (this.currentAnimation) {\n        this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n        this.currentAnimation.stop();\n      }\n      this.completeAnimation();\n    }\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its layout layout\n       * into the desired bounding box.\n       */\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n    registerSharedNode(layoutId, node) {\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      const config = node.options.initialPromotionConfig;\n      node.promote({\n        transition: config ? config.transition : undefined,\n        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n      });\n    }\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n    getLead() {\n      var _a;\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n    getPrevLead() {\n      var _a;\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n    relegate() {\n      const stack = this.getStack();\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return;\n      // If there's no detected rotation values, we can early return without a forced render.\n      let hasRotate = false;\n      /**\n       * An unrolled check for rotation values. Most elements don't have any rotation and\n       * skipping the nested loop and new object creation is 50% faster.\n       */\n      const {\n        latestValues\n      } = visualElement;\n      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n        hasRotate = true;\n      }\n      // If there's no rotation values, we don't need to do any more.\n      if (!hasRotate) return;\n      const resetValues = {};\n      // Check the rotate value of all axes and reset to 0\n      for (let i = 0; i < transformAxes.length; i++) {\n        const key = \"rotate\" + transformAxes[i];\n        // Record the rotation and then temporarily set it to 0\n        if (latestValues[key]) {\n          resetValues[key] = latestValues[key];\n          visualElement.setStaticValue(key, 0);\n        }\n      }\n      // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n      visualElement.render();\n      // Put back all the values we reset\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      }\n      // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n      visualElement.scheduleRender();\n    }\n    getProjectionStyles() {\n      let styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _a, _b;\n      // TODO: Return lifecycle-persistent object\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n      const transformTemplate = this.getTransformTemplate();\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n      const lead = this.getLead();\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n        return emptyStyles;\n      }\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its layout\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        /**\n         * Only apply scale correction to the value if we have an\n         * active projection transform. Otherwise these values become\n         * vulnerable to distortion if the element changes size without\n         * a corresponding layout animation.\n         */\n        const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n        if (applyTo) {\n          const num = applyTo.length;\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n      return styles;\n    }\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    }\n    // Only run on root\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n  };\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a;\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    const isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    const {\n      onExitComplete\n    } = node.options;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n   * is dirty we can simply pass this forward.\n   */\n  node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n  /**\n   * Propagate isTransformDirty.\n   */\n  node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, elementId) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["cancelSync","flushSync","sync","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mix","transformAxes","animationTarget","id","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","elementId","latestValues","parent","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isTransformDirty","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","node","mount","instance","SVGElement","tagName","layoutId","layout","visualElement","current","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","updateScroll","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","lead","getLead","attemptToResolveRelativeTarget","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isShared","canSkip","pendingAnimation","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","_a","getPrevLead","prevLead","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","key","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if ((this.parent.relativeTarget ||\n                this.parent.targetDelta ||\n                this.parent.options.layoutRoot) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}