{"ast":null,"code":"// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\", \"2xl\"]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map(function (item) {\n      return item === null ? null : mapper(item);\n    });\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce(function (result, key) {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj) {\n  var bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  var result = bps.map(function (br) {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  var lastItem = result[result.length - 1];\n  while (lastItem === null) result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values) {\n  var bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  var result = {};\n  values.forEach(function (value, index) {\n    var key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj) {\n  var bps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : breakpoints;\n  var keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(function (key) {\n    return bps.includes(key);\n  });\n}\nvar isCustomBreakpoint = function isCustomBreakpoint(v) {\n  return Number.isNaN(Number(v));\n};\nexport { breakpoints, mapResponsive, objectToArrayNotation, arrayToObjectNotation, isResponsiveObjectLike, isCustomBreakpoint };","map":null,"metadata":{},"sourceType":"module"}