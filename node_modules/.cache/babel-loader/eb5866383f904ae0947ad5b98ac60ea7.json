{"ast":null,"code":"import _slicedToArray from \"/Users/maniksoomro/Documents/LiquidPrep-Website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { getClosestValue } from \"./chunk-G4WB2JLN.mjs\";\nimport { useBreakpoint } from \"./chunk-CI3LDA6F.mjs\";\n\n// src/use-breakpoint-value.ts\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\";\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  var opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  var breakpoint = useBreakpoint(opts);\n  var theme = useTheme();\n  if (!breakpoint) return;\n  var breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  var obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\nexport { useBreakpointValue };","map":null,"metadata":{},"sourceType":"module"}